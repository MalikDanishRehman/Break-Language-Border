# -*- coding: utf-8 -*-
"""VoiceRecognizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PDdaBzNLOTY8aU2c8hsuduy8F3fkrWlU
"""

!pip install gradio gTTS SpeechRecognition deep-translator pydub --quiet

import os
import tempfile
import gradio as gr
import speech_recognition as sr
from gtts import gTTS
from deep_translator import GoogleTranslator
from pydub import AudioSegment

# Language map
supported_languages = {
    "English": "en",
    "Spanish": "es",
    "French": "fr",
    "Hindi": "hi",
    "German": "de",
    "Chinese (Simplified)": "zh-cn",
    "Urdu": "ur",
    "Arabic": "ar",
    "Russian": "ru",
    "Portuguese": "pt"
}

recognizer = sr.Recognizer()

# Translation function
def voice_translate(audio_path, source_lang_label, target_lang_label):
    try:
        source_lang = supported_languages[source_lang_label]
        target_lang = supported_languages[target_lang_label]

        if not audio_path.endswith(".wav"):
            sound = AudioSegment.from_file(audio_path)
            audio_path_wav = tempfile.mktemp(suffix=".wav")
            sound.export(audio_path_wav, format="wav")
            audio_path = audio_path_wav

        with sr.AudioFile(audio_path) as source:
            audio_data = recognizer.record(source)

        try:
            text = recognizer.recognize_google(audio_data, language=source_lang)
        except sr.UnknownValueError:
            return "Error", "Could not understand the audio", None
        except sr.RequestError as e:
            return "Error", f"Speech recognition error: {e}", None

        try:
            translated = GoogleTranslator(source=source_lang, target=target_lang).translate(text)
        except Exception as e:
            return text, f"Translation failed: {str(e)}", None

        try:
            fd, output_path = tempfile.mkstemp(suffix=".mp3")
            os.close(fd)
            tts = gTTS(translated, lang=target_lang)
            tts.save(output_path)
        except Exception as e:
            return text, translated, f"TTS generation failed: {str(e)}"

        return text, translated, output_path

    except Exception as e:
        return "Error", str(e), None

# Set paths to uploaded assets
logo_path = "/content/voice rec.jpeg"  # your mic logo
background_url = "/content/david-werbrouck-5GwLlb-_UYk-unsplash.jpg"  # your background

# Professional Purple-Themed HTML for Gradio description
description_html = f"""
<div style="background-color: blue; text-align: center; padding: 30px; border-radius: 20px; background: linear-gradient(to right, #7f00ff, #e100ff); background-image: url('file={background_url}'); background-size: cover; background-position: center; background-blend-mode: multiply;">
    <h2 style="color:#7f00ff; font-family: 'Segoe UI', sans-serif; margin-top: 20px; font-size: 28px;">üéôÔ∏è Voice-to-Voice Translator</h2>
    <p style="color: black; font-size: 16px; font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;">
        üéß Upload or record your voice, select your source and target languages, and hear the translated speech played back ‚Äî instantly and naturally.
    </p>
</div>
"""


# Launch Gradio Interface
iface = gr.Interface(
    fn=voice_translate,
    inputs=[
        gr.Audio(type="filepath", label="üéôÔ∏è Upload or Record Audio"),
        gr.Dropdown(choices=list(supported_languages.keys()), label="üó£Ô∏è Source Language", value="English"),
        gr.Dropdown(choices=list(supported_languages.keys()), label="üåç Target Language", value="Spanish")
    ],
    outputs=[
        gr.Textbox(label="üìù Original Text", interactive=False),
        gr.Textbox(label="üåê Translated Text", interactive=False),
        gr.Audio(label="üîä Translated Voice")
    ],
    title="",
    description=description_html,
    theme="default",
    live=False,
    allow_flagging="never"
)

iface.launch(share=True, debug=True)